#!/usr/bin/groovy

node {
    def appName = "bf-ia-broker"
    def root = pwd()
    def mvn = tool 'M3'
    def golangTool = tool 'golang_1.7'
    def zapHome = tool 'ZAProxy_v2_5_0'
    def nodejs = tool 'NodeJS_6'
    stage("Setup") {
        deleteDir()
        if(env.GITLAB_CREDS) {
            git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
        } else {
            git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
        }
        withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath"
        ]) {
            sh """
              mkdir -p ${root}/gopath/bin ${root}/gopath/pkg ${root}/gopath/src
              go version
            """
        }
/*        if(!params.SKIP_INTEGRATION_TESTS) {
            if(!fileExists("integration-tests")) {
                sh "mkdir -p integration-tests"
            }
            withCredentials([
              file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: "POSTMAN_FILE")
            ]) {
                withEnv([
                  "PATH+=${nodejs}/bin",
                  "NPM_CONFIG_CACHE=${root}/.npmcache",
                  "HOME=${WORKSPACE}"
                ]) {
                    dir ("integration-tests") {
                        if(env.GITLAB_CREDS) {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
                        } else {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}"
                        }
                        sh """
                          mkdir -p ${root}/.npmcache
                          npm install newman@2
                        """
                    }
                }
            }
        }
    }*/
    stage("Security Scan Pass/Fail") {
        // Query threadfix and block if any highs/crits are found
        /*sh "mkdir -p sspf-pkg"
        dir("./sspf-pkg") {
            withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
                sh "curl -L ${env.SSPF_PACKAGE} -o sspf.zip"
                sh "unzip sspf.zip"
                dir("./sspf-master/sspf") {
                    sh "/bin/curl --fail --silent ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}?apiKey=${THREADFIX_KEY} | ./sspf.py"
                }
            }
        }*/
    }

    def appvers = sh(script: """git describe --long --tags --always | sed 's/\\./-/'g""", returnStdout: true)
    appvers = appvers.trim()
    def fullAppName = "${appName}-${appvers}"

    stage("Archive") {
        def archiveName = "${appName}.tgz"
        withEnv([
          "PATH+=${golangTool}/bin:${root}/gopath/bin",
          "GOROOT=${golangTool}",
          "GOPATH=${root}/gopath"
        ]) {
            sh """
              mkdir -p ${GOPATH}/src/github.com/venicegeo/bf-ia-broker
              find . -maxdepth 1 -mindepth 1 -not -name gopath -exec cp -R '{}' gopath/src/github.com/venicegeo/bf-ia-broker/ \\;
              cd "\$GOPATH/src/github.com/venicegeo/bf-ia-broker"
              go install
              cd landsat
              go test -v -coverprofile=${root}/landsat.cov
              cd ..
              cd planet
              go test -v -coverprofile=${root}/planet.cov
              cd ..
              cd tides
              go test -v -coverprofile=${root}/tides.cov
              cd ..
              cd util
              go test -v -coverprofile=${root}/util.cov
              cd ..
              cd ${root}
              go tool cover -func=landsat.cov -o landsat.cov.txt
              go tool cover -func=planet.cov -o planet.cov.txt
              go tool cover -func=tides.cov -o tides.cov.txt
              go tool cover -func=util.cov -o util.cov.txt
              cp \$GOPATH/bin/bf-ia-broker ${root}/bf-ia-broker.bin
              tar -cvzf ${archiveName} bf-ia-broker.bin *.cov *.cov.txt glide.lock glide.yaml
            """
            def getDependencyStatus = sh(script: """mvn --quiet --settings ~/.m2/settings.xml dependency:get -Dmaven.repo.local="${root}/.m2/repository" -DrepositoryId=nexus -DartifactId=bf-ia-broker -Dversion=${appvers} -DgroupId="org.venice.piazza" -Dpackaging=tgz -DremoteRepositories="nexus::default::${env.ARTIFACT_STORAGE_DEPLOY_URL}" >> /dev/null 2>&1""", returnStatus: true)
            if(getDependencyStatus == 0) {
                echo "Artifact version ${appvers} exists in Nexus, nothing to do"
            } else {
                sh """
                  mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${archiveName} -DrepositoryId=nexus	-Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" -DgroupId="org.venice.piazza" -DgeneratePom=false -Dpackaging=tgz -Dmaven.repo.local="${root}/.m2/repository" -DartifactId=bf-ia-broker -Dversion=${appvers}
                """
            }
        }
    }

    def deployPhase = { String pcfSpace, String pcfDomain ->
      if(!fileExists('.cf')) {
          sh "mkdir -p .cf"
      }
      withEnv([
        "CF_HOME=.cf"
      ]) {
          withCredentials([
            [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
          ]) {
              sh """
                cf api ${env.PCF_API_ENDPOINT}
                cf auth ${CFUSER} ${CFPASS}
                cf target -o ${env.PCF_ORG} -s ${pcfSpace}
                cf push ${fullAppName} -f manifest.jenkins.yml --hostname ${fullAppName} -d ${pcfDomain} --no-start
                cf set-env ${fullAppName} SPACE ${pcfSpace}
                cf set-env ${fullAppName} DOMAIN ${pcfDomain}
                cf set-env ${fullAppName} LANDSAT_HOST ${env.LANDSAT_HOST}
                cf set-env ${fullAppName} SENTINEL_HOST ${env.SENTINEL_HOST}
                cf set-env ${fullAppName} BF_TIDE_PREDICTION_URL ${env.BF_TIDE_PREDICTION_URL}
              """
              try {
                sh "cf start ${fullAppName}"
                } catch (Exception e) {
                  //sh "cf logs --recent ${appName}"
                  sh "cf delete ${fullAppName} -f"
                  error("Error during application start. Deleting ${fullAppName} and failing the build.")
                }
              }
            }
		if(!params.SKIP_SCANS) {
			  withCredentials([
				[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]
			  ]) {
				  sh """
					mkdir -p ${root}/zap-out
					${zapHome}/zap.sh -cmd -quickout ${root}/zap-out/zap.xml -quickurl https://${fullAppName}.${pcfDomain}
					cat ${root}/zap-out/zap.xml
					/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}
				  """
			  }
		}
      withEnv([
        "CF_HOME=.cf"
      ]) {
          withCredentials([
            [$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: "CFUSER", passwordVariable: "CFPASS"]
          ]) {
              sh """
                cf api ${env.PCF_API_ENDPOINT}
                cf auth ${CFUSER} ${CFPASS}
                cf target -o ${env.PCF_ORG} -s ${pcfSpace}
              """
              def legacyAppNames = sh(script: """cf routes | grep \"${appName} \" | awk '{print \$4}'""", returnStdout: true)
              sh "cf map-route ${fullAppName} ${pcfDomain} --hostname bf-ia-broker"
              // Remove legacy applications
              for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
                  def legacyAppName = legacyApp.toString().trim()
                  if(legacyAppName != appName && legacyAppName != fullAppName) {
                      sh "cf unmap-route ${legacyAppName} ${pcfDomain} --hostname bf-ia-broker"
                      sh "cf delete -f ${legacyAppName}"
                  }
              }
          }
      }
    }

/*    def integrationTestPhase = { String pcfSpace, String pcfDomain ->
      if(!fileExists("integration-tests")) {
        sh "mkdir -p integration-tests"
      }
      // Clone Test Repository
      withCredentials([file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: 'POSTMAN_FILE')]) {
        withEnv([
          "PATH+=${root}/integration-tests/node_modules/newman/bin:${nodejs}/bin",
          "PCF_SPACE=${env.PHASE_ONE_PCF_SPACE}", "HOME=${WORKSPACE}"
          ]) {
          dir ("integration-tests") {
            if(env.GITLAB_CREDS) {
              git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
            } else {
              git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}"
            }
            sh "npm install newman@2"
            sh "/bin/bash ci/beachfront.sh"
          }
        }
      }
    }*/


    stage("Phase One Deploy") {
      deployPhase(env.PHASE_ONE_PCF_SPACE, env.PHASE_ONE_PCF_DOMAIN)
    }
    //if(!params.SKIP_INTEGRATION_TESTS) {
     //   stage("Phase One Integration Tests") {
      //    integrationTestPhase(env.PHASE_ONE_PCF_SPACE, env.PHASE_ONE_PCF_DOMAIN)
       // }
    //}

if(!params.SKIP_INTEGRATION_TESTS) {
        stage("Phase One Integration Tests") {
                        if(!fileExists("integration-tests")) {
                sh "mkdir -p integration-tests"
            }
            withCredentials([
              file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: "POSTMAN_FILE")
            ]) {
                withEnv([
                  "PATH+=${nodejs}/bin",
                  "NPM_CONFIG_CACHE=${root}/.npmcache",
                  "PCF_SPACE=${env.PHASE_ONE_PCF_SPACE}",
                  "HOME=${WORKSPACE}"
                ]) {
                    dir ("integration-tests") {
                        if(env.GITLAB_CREDS) {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
                        } else {
                            git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}"
                        }
                        sh """
                          mkdir -p ${root}/.npmcache
                          npm install newman@2
                        """
                        sh "sh ci/beachfront_integration_tests.sh"
                    }
                }
            }
        }
    }

if(params.DEPLOY_PHASE_TWO) {
      stage("Phase Two Deploy") {
        deployPhase(env.PHASE_TWO_PCF_SPACE, env.PHASE_TWO_PCF_DOMAIN)
      }

/*      if(!params.SKIP_INTEGRATION_TESTS) {
        stage("Phase Two Integration Tests") {
          integrationTestPhase(env.PHASE_TWO_PCF_SPACE, env.PHASE_TWO_PCF_DOMAIN)
        }
      }*/

 if(!params.SKIP_INTEGRATION_TESTS) {
        stage("Phase Two Integration Tests") {
            withCredentials([
              file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: "POSTMAN_FILE")
            ]) {
                withEnv([
                  "PATH+=${root}/integration-tests/node_modules/newman/bin:${nodejs}/bin",
                  "PCF_SPACE=${env.PHASE_TWO_PCF_SPACE}",
                  "NPM_CONFIG_CACHE=${root}/.npmcache",
                  "HOME=${WORKSPACE}"

                ]) {
                    dir ("integration-tests") {
                        sh "sh ci/beachfront_integration_tests_stage.sh"
                    }
                }
            }
        }
      }
    }

 }
}
